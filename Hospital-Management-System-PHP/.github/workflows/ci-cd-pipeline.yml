name: Build and Deploy LAMP Stack Docker Image to ECR

on:
  push:
    branches:
      - main    # Trigger on pushes to the main branch
    tags:
      - 'v*'   # Trigger on tag creation like v1.0.0
  pull_request:
    branches:
      - main    # Trigger on pull requests to the main branch

jobs:
  # Build job - builds the Docker image
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.get_version.outputs.version }}
    
    steps:
      # Step 1: Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Docker Buildx (for multi-platform support)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to Amazon ECR using GitHub Secrets
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # Step 4: Get the version from the Git tag or generate one based on commit
      - name: Get version from Git tag or generate from commit
        id: get_version
        run: |
          VERSION_TAG=$(git tag --points-at HEAD || echo "v$(git rev-list --count HEAD)")
          echo "Version tag: $VERSION_TAG"
          echo "::set-output name=version::$VERSION_TAG"

      # Step 5: Build Docker image and tag it with version
      - name: Build Docker image with version tag
        run: |
          docker build -t ${{ secrets.AWS_ECR_REPO_URI }}:${{ steps.get_version.outputs.version }} .
        
  # Tag job - (optional) to re-tag the Docker image if you want to use latest as well
  tag:
    runs-on: ubuntu-latest
    needs: build  # This job depends on the build job
    steps:
      # Step 1: Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Tag Docker image with Git version tag
      - name: Tag Docker image with Git version tag
        run: |
          IMAGE_TAG=${{ needs.build.outputs.image_tag }}
          docker tag ${{ secrets.AWS_ECR_REPO_URI }}:${{ needs.build.outputs.image_tag }} ${{ secrets.AWS_ECR_REPO_URI }}:$IMAGE_TAG
          echo "Docker image tagged as: ${{ secrets.AWS_ECR_REPO_URI }}:$IMAGE_TAG"
        
  # Push job - pushes the tagged Docker image to AWS ECR
  push:
    runs-on: ubuntu-latest
    needs: tag  # This job depends on the tag job
    steps:
      # Step 1: Log in to Amazon ECR again to ensure Docker is authenticated
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # Step 2: Push Docker image to ECR with version tag
      - name: Push Docker image to ECR
        run: |
          VERSION_TAG=${{ needs.build.outputs.image_tag }}
          docker push ${{ secrets.AWS_ECR_REPO_URI }}:$VERSION_TAG
          echo "Docker image pushed to ECR with tag: ${{ secrets.AWS_ECR_REPO_URI }}:$VERSION_TAG"
          
      # Optional: Step 3: Clean up Docker images to save space
      - name: Clean up Docker images
        run: |
          docker rmi ${{ secrets.AWS_ECR_REPO_URI }}:${{ needs.build.outputs.image_tag }}
